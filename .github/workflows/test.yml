name: Test

on:
  workflow_call:
    inputs:
      include-pr-comment:
        description: 'Include PR comment'
        required: false
        type: boolean
        default: false
    outputs:
      test-result:
        description: 'Test result'
        value: ${{ jobs.test.outputs.result }}
  pull_request:
    branches: [main, staging, develop]

env:
  DO_NOT_TRACK: ${{ vars.DO_NOT_TRACK }}
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: ${{ vars.VERCEL_TEAM }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      result: ${{ steps.test-result.outputs.result }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://npm.pkg.github.com'
          cache: 'pnpm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run tests
        run: pnpm test

      - name: Run type checking
        run: |
          # Find all packages with tsconfig.json and run type checking
          for package in packages/*/; do
            if [ -f "$package/tsconfig.json" ]; then
              package_name=$(basename "$package")
              echo "Running type checking for $package_name (excluding test files)..."
              cd "$package"
              
              # Create a temporary tsconfig for CI that excludes test files
              cat > tsconfig.ci.json << EOF
          {
            "extends": "./tsconfig.json",
            "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.spec.ts"]
          }
          EOF
              
              pnpm exec tsc --noEmit --project tsconfig.ci.json
              rm tsconfig.ci.json
            fi
          done

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Display coverage summary
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "## Coverage Summary"
            if command -v jq >/dev/null 2>&1; then
              echo "Coverage details:"
              jq '.total' coverage/coverage-summary.json
            else
              echo "Coverage report generated successfully"
              echo "Coverage data available in HTML report"
            fi
          else
            echo "No coverage summary found"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

      - name: Set test result
        id: test-result
        run: echo "result=success" >> $GITHUB_OUTPUT

  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    if: ${{ inputs.include-pr-comment == true && github.event_name == 'pull_request' }}
    needs: [test]

    steps:
      - name: Comment PR status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Test Results')
            );

            const testStatus = '${{ needs.test.result }}' === 'success' ? '✅ **PASSED**' : '❌ **FAILED**';
            const emoji = '${{ needs.test.result }}' === 'success' ? '🎉' : '🚨';

            const body = `## Test Results ${emoji}

            **Tests & Coverage:** ${testStatus}
            **Workflow:** Test
            **Commit:** \`${{ github.sha }}\`
            **Branch:** \`${{ github.ref_name }}\`

            All checks have been completed. ${testStatus === '✅ **PASSED**' ? 'This PR is ready for review!' : 'Please fix the issues before merging.'}`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
