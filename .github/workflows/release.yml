name: Release

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - beta

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  DO_NOT_TRACK: ${{ vars.DO_NOT_TRACK }}
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: ${{ vars.VERCEL_TEAM }}

jobs:
  test:
    name: Test Packages
    uses: ./.github/workflows/test.yml
    with:
      include-pr-comment: false

  release:
    name: Release Packages
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.test-result == 'success'
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://npm.pkg.github.com'
          cache: 'pnpm'
        env:
          NODE_AUTH_TOKEN: ${{ github.token }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Check for changeset files
        id: changeset-check
        run: |
          if [ -n "$(find .changeset -name "*.md" -type f)" ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
            echo "Found changeset files"
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
            echo "No changeset files found"
          fi

      - name: Skip release when no changesets
        if: steps.changeset-check.outputs.has-changesets == 'false'
        run: |
          echo "⚠️  No changeset files found. Skipping release process."
          echo "To create a release, run 'pnpm changeset:auto' locally and commit the changes."
          exit 0

      - name: Determine release type
        id: release-type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "type=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "type=beta" >> $GITHUB_OUTPUT
          else
            echo "type=production" >> $GITHUB_OUTPUT
          fi
          echo "Release type determined: ${{ steps.release-type.outputs.type }}"

      - name: Create Release PR
        if: steps.changeset-check.outputs.has-changesets == 'true'
        uses: changesets/action@v1
        with:
          version: pnpm changeset version ${{ steps.release-type.outputs.type != 'production' && format('--snapshot {0}', steps.release-type.outputs.type) || '' }}
          commit: 'chore: release ${{ steps.release-type.outputs.type }} packages'
          title: 'chore: release ${{ steps.release-type.outputs.type }} packages'
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Merge Release PR
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: |
          PR_NUMBER=$(gh pr list --head "changeset-release/main" --json number --jq '.[0].number')
          if [ "$PR_NUMBER" != "null" ] && [ "$PR_NUMBER" != "" ]; then
            echo "Squash merging PR #$PR_NUMBER"
            gh pr merge $PR_NUMBER --squash --delete-branch
          else
            echo "No release PR found"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Publish Packages
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: pnpm changeset publish ${{ steps.release-type.outputs.type != 'production' && format('--tag {0}', steps.release-type.outputs.type) || '' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          NPM_TOKEN: ${{ github.token }}
          NODE_AUTH_TOKEN: ${{ github.token }}

      - name: Create Git Tags
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: |
          for package in packages/*/; do
            if [ -f "$package/package.json" ]; then
              package_name=$(cat "$package/package.json" | jq -r '.name')
              new_version=$(cat "$package/package.json" | jq -r '.version')
              
              if git diff --quiet HEAD~1 HEAD -- "$package/package.json"; then
                echo "No changes detected for $package_name, skipping tag"
              else
                echo "Creating git tag for $package_name@$new_version"
                git tag "$package_name@$new_version"
              fi
            fi
          done
          git push --tags
