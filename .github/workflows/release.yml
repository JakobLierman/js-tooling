name: Release

on:
  push:
    branches: [main, staging, develop]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - beta
          - alpha

env:
  DO_NOT_TRACK: ${{ vars.DO_NOT_TRACK }}
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: ${{ vars.VERCEL_TEAM }}

jobs:
  test:
    name: Test Packages
    uses: ./.github/workflows/test.yml
    with:
      include-pr-comment: false

  release:
    name: Release Packages
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.test-result == 'success'
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://npm.pkg.github.com'
          cache: 'pnpm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Generate automated changesets
        run: pnpm changeset:auto

      - name: Determine release type
        id: release-type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "type=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "type=beta" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "type=alpha" >> $GITHUB_OUTPUT
          else
            echo "type=production" >> $GITHUB_OUTPUT
          fi
          echo "Release type determined: ${{ steps.release-type.outputs.type }}"

      - name: Handle Production Release
        if: steps.release-type.outputs.type == 'production'
        uses: changesets/action@v1
        with:
          publish: pnpm changeset publish
          version: pnpm changeset version
          commit: 'chore: release packages'
          title: 'chore: release packages'
          commitMode: 'github-api'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle Snapshot Release
        if: steps.release-type.outputs.type != 'production'
        uses: changesets/action@v1
        with:
          publish: pnpm changeset publish --tag ${{ steps.release-type.outputs.type }}
          version: pnpm changeset version --snapshot ${{ steps.release-type.outputs.type }}
          commit: 'chore: release ${{ steps.release-type.outputs.type }} packages'
          title: 'chore: release ${{ steps.release-type.outputs.type }} packages'
          commitMode: 'github-api'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git Tags
        run: |
          # Create tags only for packages that were actually updated
          for package in packages/*/; do
            if [ -f "$package/package.json" ]; then
              package_name=$(cat "$package/package.json" | jq -r '.name')
              new_version=$(cat "$package/package.json" | jq -r '.version')
              
              # Check if this package was actually updated by looking for changes in package.json
              if git diff --quiet HEAD~1 HEAD -- "$package/package.json"; then
                echo "No changes detected for $package_name, skipping tag"
              else
                echo "Creating git tag for $package_name@$new_version"
                git tag "$package_name@$new_version"
              fi
            fi
          done
          git push --tags
